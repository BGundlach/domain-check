#!/bin/bash 
# dmnchk v1.1
# Description: Check for domain name availability
# Please fork and improve me on github
# github.com/BGundlach/domain-check
 
if [ "$#" == "0" ]; then 
    echo "try \"dmnchk -h\" for help" 
    exit 1
fi 
ONLY=true
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET="$(readlink "$SOURCE")"
  if [[ $SOURCE == /* ]]; then
    SOURCE="$TARGET"
  else
    SCRIPT_DIR="$( dirname "$SOURCE" )"
    SOURCE="$SCRIPT_DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done
scriptPath="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
while getopts ":cealhu" opt; do
  case $opt in
    h)
      echo "USAGE:"
      echo "  dmnchk [options] domains(without tld extentions)"
      echo " "
      echo "EXAMPLE: "
      echo "  dmnchk purple"
      echo "Sample Output: "
      echo "  purple.com : available"
      echo "  purple.net : available"
      echo "  purple.ac : available"
      echo " etc."
      echo " "
      echo "OPTIONS:"
      echo "  -c classic domains only (.com .net .org .biz)"
      echo "  -a search all (include every tld)"
      # echo "  -t time-crunch (faster but less accurate)"
      echo "  -h display this help message"
      echo "  -l list all tlds"
      echo "  -u update domain list"
      exit 1
      ;;
    u)
      echo "list is updating, this may take a while" >&2
      wget -qP ${scriptPath}/ https://data.iana.org/TLD/tlds-alpha-by-domain.txt
      tail -n +2 ${scriptPath}/tlds-alpha-by-domain.txt > ${scriptPath}/extendedalpha
      grep -v "XN" ${scriptPath}/extendedalpha > ${scriptPath}/tlds-alpha-by-domain.txt
      mv ${scriptPath}/tlds-alpha-by-domain.txt ${scriptPath}/extendedalpha
      ;;
    c)
      CLASSIC=true
      ;;
    l)
 	  LIST=true
 	  ;;
 	  [ae])
 	  EXTENDED=true
    ONLY=false
 	  ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

shift $(($OPTIND-1))
function check_domain()
{
      host $1 | egrep -q 'not found' 
    if [ $? -eq 0 ]; then 
        echo "$1 : available" |tr '[:upper:]' '[:lower:]'
    fi 
}
function check_domain_server()
{
      host $1 | egrep -q 'not found' 
    if [ $? -eq 0 ]; then 
        echo "$1 : available" |tr '[:upper:]' '[:lower:]'
    fi 
}

if [ "$EXTENDED" = true ]; then
	DOMAINS=()
	while read line; do
		THISDOMAIN=$line
		DOMAINS+=($THISDOMAIN)
	done < ${scriptPath}/extendedalpha
fi
 

 if [ "$LIST" = true ]; then
ELEMENTS=${#DOMAINS[@]} 
 	  for (( i=0;i<$ELEMENTS;i++)); do 
	      printf "%-8s\n" "${DOMAINS[${i}]}"
done | column -x
  exit 1 
 fi

if [ "$#" == "0" ]; then 
    echo "No domain to check!" 
    exit 1
fi 


if [ "$CLASSIC" = true ]; then
	DOMAINS=( 'com' 'net' 'org' 'biz' )
fi
else
  if [ "$ONLY" = true ]; then
    DOMAINS=( 'com' )
  fi
ELEMENTS=${#DOMAINS[@]} 
while (( "$#" )); do 
  for i in `seq ${ELEMENTS}`; do
      check_domain $1.${DOMAINS[${i}]} &
  done 
 shift 
done 
else
ELEMENTS=${#DOMAINS[@]} 


while (( "$#" )); do 
 
for i in `seq ${ELEMENTS}`; do
      check_domain $1.${DOMAINS[${i}]} &
done

shift 
 
done
fi

sleep $[$ELEMENTS / 3]
# echo ""
